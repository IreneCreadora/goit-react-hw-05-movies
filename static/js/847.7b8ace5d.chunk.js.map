{"version":3,"file":"static/js/847.7b8ace5d.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,+FACzBC,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHkB,kBAOND,EAAAA,EAAAA,IAAA,uBAAkCG,GAP5B,uBAOrBG,EAPqB,EAOrBA,KAPqB,kBAQtBA,EAAKC,SARiB,gCAU7BC,QAAQC,IAAI,2BAA4B,KAAMC,SAVjB,yDAAH,qDAcjBC,EAAS,mCAAG,WAAOC,EAAaC,GAApB,kFACjBV,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTa,MAAOF,EACPG,KAAMF,IALa,kBASEb,EAAAA,EAAAA,IAAA,iBAA4BG,GAT9B,uBASbG,EATa,EASbA,KATa,kBAUdA,EAAKC,SAVS,gCAYrBC,QAAQQ,MAAM,2BAA4B,KAAMN,SAZ3B,yDAAH,wDAgBTO,EAAY,mCAAG,WAAMC,GAAN,kFACpBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHa,kBAODD,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,KAA2Bf,GAP1B,uBAOhBG,EAPgB,EAOhBA,KAPgB,kBASjBA,GATiB,gCAWxBE,QAAQQ,MAAM,2BAA4B,KAAMN,SAXxB,yDAAH,sDAeZS,EAAQ,mCAAG,WAAMD,GAAN,kFAChBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTmB,SAAU,UAJQ,kBASGpB,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,aAAmCf,GATtC,uBASZG,EATY,EASZA,KATY,kBAWbA,EAAKe,MAXQ,gCAapBb,QAAQQ,MAAM,2BAA4B,KAAMN,SAb5B,yDAAH,sDAiBRY,EAAU,mCAAG,WAAMJ,GAAN,kFAClBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTmB,SAAU,QACVL,KAAM,IALc,kBAUCf,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,aAAmCf,GAVpC,uBAUdG,EAVc,EAUdA,KAVc,kBAYfA,EAAKC,SAZU,gCActBC,QAAQQ,MAAM,2BAA4B,KAAMN,SAd1B,yDAAH,qD,mFC3BvB,UApCgB,WACd,IAAQQ,GAAOK,EAAAA,EAAAA,MAAPL,GACR,GAA8BM,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOR,EAAP,KAAcW,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YACRN,EAAAA,EAAAA,IAAWO,OAAOX,IACfY,MAAK,SAAAL,GACJC,EAAWD,GACXE,EAAS,KACV,IACAI,OAAM,SAAAf,GACLW,EAASX,GACTU,EAAW,GACZ,GACJ,GAAE,CAACR,KAGF,gCACGO,EAAQO,OAAS,IAAMhB,IACtB,wBACGS,EAAQQ,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGjB,EADE,MAQG,IAAnBO,EAAQO,SAAiBhB,IACxB,sEAIP,C","sources":["API/moviesAPI.js","components/reviews/reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY_API = '74c5e15336c71e6f10e46fc816460a0f';\n\nexport const getTrendingMovies = async () => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/trending/movie/day?`, options);\n    return data.results;\n  } catch (error) {\n    console.log('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovies = async (searchQuery, currentPage) => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      query: searchQuery,\n      page: currentPage,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/search/movie?`, options);\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/movie/${id}?`, options);\n\n    return data;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getCasts = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?`, options);\n\n    return data.cast;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n      page: 1,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?`, options);\n\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from 'API/moviesAPI';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getReviews(Number(id))\n      .then(reviews => {\n        setReviews(reviews);\n        setError(null);\n      })\n      .catch(error => {\n        setError(error);\n        setReviews([]);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {reviews.length > 0 && !error && (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {reviews.length === 0 && !error && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["axios","KEY_API","getTrendingMovies","options","params","api_key","data","results","console","log","message","getMovies","searchQuery","currentPage","query","page","error","getMovieById","id","getCasts","language","cast","getReviews","useParams","useState","reviews","setReviews","setError","useEffect","Number","then","catch","length","map","author","content"],"sourceRoot":""}