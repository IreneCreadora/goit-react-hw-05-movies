{"version":3,"file":"static/js/892.9fb10760.chunk.js","mappings":"mTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,+FACzBC,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHkB,kBAOND,EAAAA,EAAAA,IAAA,uBAAkCG,GAP5B,uBAOrBG,EAPqB,EAOrBA,KAPqB,kBAQtBA,EAAKC,SARiB,gCAU7BC,QAAQC,IAAI,2BAA4B,KAAMC,SAVjB,yDAAH,qDAcjBC,EAAS,mCAAG,WAAOC,EAAaC,GAApB,kFACjBV,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTa,MAAOF,EACPG,KAAMF,IALa,kBASEb,EAAAA,EAAAA,IAAA,iBAA4BG,GAT9B,uBASbG,EATa,EASbA,KATa,kBAUdA,EAAKC,SAVS,gCAYrBC,QAAQQ,MAAM,2BAA4B,KAAMN,SAZ3B,yDAAH,wDAgBTO,EAAY,mCAAG,WAAMC,GAAN,kFACpBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHa,kBAODD,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,KAA2Bf,GAP1B,uBAOhBG,EAPgB,EAOhBA,KAPgB,kBASjBA,GATiB,gCAWxBE,QAAQQ,MAAM,2BAA4B,KAAMN,SAXxB,yDAAH,sDAeZS,EAAQ,mCAAG,WAAMD,GAAN,kFAChBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTmB,SAAU,UAJQ,kBASGpB,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,aAAmCf,GATtC,uBASZG,EATY,EASZA,KATY,kBAWbA,EAAKe,MAXQ,gCAapBb,QAAQQ,MAAM,2BAA4B,KAAMN,SAb5B,yDAAH,sDAiBRY,EAAU,mCAAG,WAAMJ,GAAN,kFAClBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTmB,SAAU,QACVL,KAAM,IALc,kBAUCf,EAAAA,EAAAA,IAAA,iBAAoBkB,EAApB,aAAmCf,GAVpC,uBAUdG,EAVc,EAUdA,KAVc,kBAYfA,EAAKC,SAZU,gCActBC,QAAQQ,MAAM,2BAA4B,KAAMN,SAd1B,yDAAH,qD,qICjEVa,EAAUC,EAAAA,GAAAA,GAAH,qIASPC,EAAQD,EAAAA,GAAAA,GAAH,8R,SC2ClB,EAjDa,WACX,IAAQN,GAAOQ,EAAAA,EAAAA,MAAPR,GACR,GAA4BS,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOX,EAAP,KAAcc,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YACRZ,EAAAA,EAAAA,IAASa,OAAOd,IACbe,MAAK,SAAAL,GACJC,EAAUD,GACVE,EAAS,KACV,IACAI,OAAM,SAAAlB,GACLc,EAASd,GACTa,EAAU,GACX,GACJ,GAAE,CAACX,KAGF,iCACS,OAANU,QAAM,IAANA,OAAA,EAAAA,EAAQO,QAAS,IAChB,SAACZ,EAAD,UACGK,EAAOQ,KAAI,gBAAGlB,EAAH,EAAGA,GAAImB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACV,UAACd,EAAD,YACE,gBACEe,IACEF,EAAY,yCAC0BA,GAD1B,gDAIdG,IAAKJ,EACLK,MAAO,OAET,4BACE,wBAAKL,KACL,0BACE,sCADF,IACqBE,UAbbrB,EADF,MAqBG,IAAlBU,EAAOO,SAAiBnB,IACvB,iFAIP,C","sources":["API/moviesAPI.js","components/cast/cast.styled.js","components/cast/cast.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY_API = '74c5e15336c71e6f10e46fc816460a0f';\n\nexport const getTrendingMovies = async () => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/trending/movie/day?`, options);\n    return data.results;\n  } catch (error) {\n    console.log('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovies = async (searchQuery, currentPage) => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      query: searchQuery,\n      page: currentPage,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/search/movie?`, options);\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/movie/${id}?`, options);\n\n    return data;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getCasts = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?`, options);\n\n    return data.cast;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n      page: 1,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?`, options);\n\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-left: -20px;\n  margin-top: -20px;\n  margin-bottom: 20px;\n`;\n\nexport const Actor = styled.li`\n  flex-basis: calc(100% / 2 - 20px);\n  margin-left: 20px;\n  margin-top: 20px;\n\n  @media (min-width: 768px) and (max-width: 1199px) {\n    flex-basis: calc(100% / 4 - 20px);\n  }\n\n  @media (min-width: 1200px) {\n    flex-basis: calc(100% / 6 - 20px);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCasts } from 'API/moviesAPI';\nimport { Wrapper, Actor } from './cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getCasts(Number(id))\n      .then(actors => {\n        setActors(actors);\n        setError(null);\n      })\n      .catch(error => {\n        setError(error);\n        setActors([]);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {actors?.length > 0 && (\n        <Wrapper>\n          {actors.map(({ id, name, profile_path, character }) => (\n            <Actor key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://sdlatlas.com/public/img/thumbnail.jpg`\n                }\n                alt={name}\n                width={200}\n              />\n              <div>\n                <h3>{name}</h3>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </div>\n            </Actor>\n          ))}\n        </Wrapper>\n      )}\n      {actors.length === 0 && !error && (\n        <p>There is no information about actors for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["axios","KEY_API","getTrendingMovies","options","params","api_key","data","results","console","log","message","getMovies","searchQuery","currentPage","query","page","error","getMovieById","id","getCasts","language","cast","getReviews","Wrapper","styled","Actor","useParams","useState","actors","setActors","setError","useEffect","Number","then","catch","length","map","name","profile_path","character","src","alt","width"],"sourceRoot":""}