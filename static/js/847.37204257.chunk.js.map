{"version":3,"file":"static/js/847.37204257.chunk.js","mappings":"mMAwCA,UApCgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAWC,OAAOT,IACfU,MAAK,SAAAP,GACJC,EAAWD,GACXG,EAAS,KACV,IACAK,OAAM,SAAAN,GACLC,EAASD,GACTD,EAAW,GACZ,GACJ,GAAE,CAACJ,KAGF,gCACGG,EAAQS,OAAS,IAAMP,IACtB,wBACGF,EAAQU,KAAI,gBAAGb,EAAH,EAAGA,GAAIc,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,qCAAaD,MACb,uBAAIC,MAFGf,EADE,MAQG,IAAnBG,EAAQS,SAAiBP,IACxB,sEAIP,C,mMCpCDW,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAiB,mCAAG,iGACzBC,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHkB,kBAOND,EAAAA,EAAAA,IAAA,uBAAkCG,GAP5B,uBAOrBG,EAPqB,EAOrBA,KACFC,EAAYD,EAAKE,QAAQX,KAC7B,gBAAGb,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,MAA+C,CAC7C3B,GAAAA,EACA0B,YAAaA,EAAW,yCACcA,GADd,gDAGxBD,MAAOA,GAAgB,iBACvBE,aAAcA,EAAaC,QAAQ,GANrC,IAT2B,kBAkBtBL,GAlBsB,kCAoB7BM,QAAQC,IAAI,2BAA4B,KAAMC,SApBjB,0DAAH,qDAwBjBC,EAAS,mCAAG,WAAOC,EAAaC,GAApB,oFACjBf,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTkB,MAAOF,EACPG,KAAMF,IALa,kBASElB,EAAAA,EAAAA,IAAA,iBAA4BG,GAT9B,uBASbG,EATa,EASbA,KACFC,EAAYD,EAAKE,QAAQX,KAC7B,gBAAGb,EAAH,EAAGA,GAAIyB,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAaC,EAA3B,EAA2BA,aAA3B,MAA+C,CAC7C3B,GAAAA,EACA0B,YAAaA,EAAW,yCACcA,GADd,gDAGxBD,MAAOA,GAAgB,iBACvBE,aAAcA,EAAaC,QAAQ,GANrC,IAXmB,kBAoBdL,GApBc,kCAsBrBM,QAAQxB,MAAM,2BAA4B,KAAM0B,SAtB3B,0DAAH,wDA0BTM,EAAY,mCAAG,WAAMrC,GAAN,kFACpBmB,EAAU,CACdC,OAAQ,CACNC,QAASJ,IAHa,kBAODD,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,KAA2BmB,GAP1B,uBAOhBG,EAPgB,EAOhBA,KAPgB,kBAQjBA,GARiB,gCAUxBO,QAAQxB,MAAM,2BAA4B,KAAM0B,SAVxB,yDAAH,sDAcZO,EAAQ,mCAAG,WAAMtC,GAAN,kFAChBmB,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTsB,SAAU,UAJQ,kBASGvB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,aAAmCmB,GATtC,uBASZG,EATY,EASZA,KATY,kBAWbA,EAAKkB,MAXQ,gCAapBX,QAAQxB,MAAM,2BAA4B,KAAM0B,SAb5B,yDAAH,sDAiBRvB,EAAU,mCAAG,WAAMR,GAAN,kFAClBmB,EAAU,CACdC,OAAQ,CACNC,QAASJ,EACTsB,SAAU,QACVH,KAAM,IALc,kBAUCpB,EAAAA,EAAAA,IAAA,iBAAoBhB,EAApB,aAAmCmB,GAVpC,uBAUdG,EAVc,EAUdA,KAVc,kBAYfA,EAAKE,SAZU,gCActBK,QAAQxB,MAAM,2BAA4B,KAAM0B,SAd1B,yDAAH,qD","sources":["components/reviews/reviews.jsx","services/API/moviesAPI.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviews } from '../../services/API/moviesAPI';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getReviews(Number(id))\n      .then(reviews => {\n        setReviews(reviews);\n        setError(null);\n      })\n      .catch(error => {\n        setError(error);\n        setReviews([]);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {reviews.length > 0 && !error && (\n        <ul>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h4>Author: {author}</h4>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {reviews.length === 0 && !error && (\n        <p>We don't have any reviews for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY_API = '74c5e15336c71e6f10e46fc816460a0f';\n\nexport const getTrendingMovies = async () => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/trending/movie/day?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.log('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovies = async (searchQuery, currentPage) => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      query: searchQuery,\n      page: currentPage,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/search/movie?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/movie/${id}?`, options);\n    return data;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getCasts = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?`, options);\n\n    return data.cast;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n      page: 1,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?`, options);\n\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n"],"names":["id","useParams","useState","reviews","setReviews","error","setError","useEffect","getReviews","Number","then","catch","length","map","author","content","axios","KEY_API","getTrendingMovies","options","params","api_key","data","validData","results","title","poster_path","vote_average","toFixed","console","log","message","getMovies","searchQuery","currentPage","query","page","getMovieById","getCasts","language","cast"],"sourceRoot":""}