{"version":3,"file":"static/js/878.3cc9b3ca.chunk.js","mappings":"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","sources":["components/moviesList/moviesList.styled.js","components/movieInfo/movieInfo.styled.js","components/movieInfo/movieInfo.jsx","components/moviesList/moviesList.jsx","helpers/ToastParams.js","components/searchBox/searchBox.styled.js","components/searchBox/searchBox.jsx","pages/movies.jsx","services/API/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-left: -20px;\n  margin-top: -20px;\n  padding: 20px 0;\n`;\n\nexport const Item = styled.li`\n  flex-basis: calc(100% / 2 - 20px);\n  margin-left: 20px;\n  margin-top: 20px;\n\n  opacity: 1;\n\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #02be6e;\n\n    opacity: 0.8;\n\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  @media (max-width: 1169px) {\n    flex-basis: calc(100% / 3 - 20px);\n  }\n\n  @media (min-width: 1170px) {\n    flex-basis: calc(100% / 4 - 20px);\n  }\n\n  > a {\n    color: inherit;\n    text-decoration: none;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Card = styled.div`\n  position: relative;\n  border-radius: ${p => p.theme.radii.normal};\n  border: solid 1px ${p => p.theme.colors.border};\n  background: ${p => p.theme.colors.muted};\n`;\n\nexport const Thumb = styled.div`\n  height: 250px;\n\n  @media (max-width: 767px) {\n    height: 300px;\n  }\n\n  @media (max-width: 1169px) {\n    height: 350px;\n  }\n\n  @media (min-width: 1170px) {\n    height: 400px;\n  }\n`;\n\nexport const Poster = styled.img`\n  width: 100%;\n  height: 100%;\n  border-radius: ${p => p.theme.radii.normal};\n\n  object-fit: cover;\n  object-position: top;\n`;\n\nexport const Discription = styled.p`\n  display: flex;\n  justify-content: center;\n  padding: 10px;\n\n  font-size: ${p => p.theme.fontSizes.m};\n`;\n\nexport const Vote = styled.b`\n  position: absolute;\n  top: 15px;\n  right: 15px;\n  padding: 5px;\n  border-radius: ${p => p.theme.radii.normal};\n\n  color: ${p => p.theme.colors.white};\n  background-color: ${p => p.theme.colors.accent};\n`;\n","import PropTypes from 'prop-types';\nimport { Card, Thumb, Poster, Discription, Vote } from './movieInfo.styled';\n\nexport const MovieInfo = ({ title, poster, vote }) => {\n  return (\n    <Card>\n      <Thumb>\n        <Poster src={poster} alt={title} />\n      </Thumb>\n      <Discription>\n        <span>{title}</span>\n        {vote ? <Vote>{vote}</Vote> : null}\n      </Discription>\n    </Card>\n  );\n};\n\nMovieInfo.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  vote: PropTypes.string,\n};\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { List, Item } from './moviesList.styled';\nimport { MovieInfo } from 'components/movieInfo/movieInfo';\n\nexport const MoviesList = ({ movies, location }) => {\n  return (\n    <List>\n      {movies.map(({ id, title, poster_path, vote_average }) => (\n        <Item key={id}>\n          <Link to={`/movies/${id}`} state={{ from: location }}>\n            <MovieInfo title={title} poster={poster_path} vote={vote_average} />\n          </Link>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string.isRequired,\n      vote_average: PropTypes.string,\n    })\n  ).isRequired,\n  location: PropTypes.object.isRequired,\n};\n","const toastParams = {\n  position: 'top-center',\n  autoClose: 2000,\n  hideProgressBar: false,\n  closeOnClick: true,\n  pauseOnHover: true,\n  draggable: true,\n  progress: undefined,\n};\nexport default toastParams;\n","import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: ${p => p.theme.radii.normal};\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","import PropTypes from 'prop-types';\nimport { Wrapper, Input, Icon } from './searchBox.styled';\n\nexport const SearchBox = ({ value, onChange }) => {\n  return (\n    <Wrapper>\n      <Icon />\n      <Input\n        type=\"text\"\n        name=\"query\"\n        value={value}\n        autoComplete=\"off\"\n        placeholder=\"Search movies\"\n        autoFocus\n        required\n        onChange={e => onChange(e.target.value)}\n      />\n    </Wrapper>\n  );\n};\n\nSearchBox.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n","import { useSearchParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { MoviesList } from 'components/moviesList/moviesList';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport toastParams from '../helpers/ToastParams';\nimport { SearchBox } from '../components/searchBox/searchBox';\nimport { getMovies } from '../services/API/moviesAPI';\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query') ?? '';\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [error, setError] = useState('');\n  const location = useLocation();\n\n  useEffect(() => {\n    error && toast.error(error, toastParams);\n  }, [error]);\n\n  useEffect(() => {\n    if (!searchQuery) {\n      setSearchMovies([]);\n      return;\n    }\n\n    if (searchQuery.trim() === '' || searchQuery === '') {\n      setError('ðŸ¦„Lets start the search');\n      return;\n    }\n\n    getMovies(searchQuery.toLowerCase().trim())\n      .then(movies => {\n        setSearchMovies(movies);\n        if (movies.length === 0) {\n          setError('Sorry, something went wrong.ðŸ¦„ Please try again');\n        }\n        setError('');\n      })\n      .catch(error => {\n        console.log(error.message);\n        setSearchMovies([]);\n        setError(error);\n      });\n  }, [searchQuery]);\n\n  const updateQuery = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n\n  return (\n    <main>\n      <SearchBox value={searchQuery} onChange={updateQuery} />\n      <MoviesList movies={searchMovies} location={location} />\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY_API = '74c5e15336c71e6f10e46fc816460a0f';\n\nexport const getTrendingMovies = async () => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/trending/movie/day?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.log('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovies = async (searchQuery, currentPage) => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      query: searchQuery,\n      page: currentPage,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/search/movie?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/movie/${id}?`, options);\n    return data;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getCasts = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?`, options);\n\n    return data.cast;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n      page: 1,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?`, options);\n\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n"],"names":["List","styled","Item","Card","p","theme","radii","normal","colors","border","muted","Thumb","Poster","Discription","fontSizes","m","Vote","white","accent","MovieInfo","title","poster","vote","src","alt","MoviesList","movies","location","map","id","poster_path","vote_average","to","state","from","toastParams","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","Wrapper","Input","Icon","HiSearch","SearchBox","value","onChange","type","name","autoComplete","placeholder","autoFocus","required","e","target","useSearchParams","searchParams","setSearchParams","searchQuery","get","useState","searchMovies","setSearchMovies","error","setError","useLocation","useEffect","toast","trim","getMovies","toLowerCase","then","length","catch","console","log","message","query","axios","KEY_API","getTrendingMovies","options","params","api_key","data","validData","results","toFixed","currentPage","page","getMovieById","getCasts","language","cast","getReviews"],"sourceRoot":""}