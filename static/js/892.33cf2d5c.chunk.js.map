{"version":3,"file":"static/js/892.33cf2d5c.chunk.js","mappings":"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","sources":["components/cast/cast.styled.js","components/cast/cast.jsx","services/API/moviesAPI.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  margin-left: -20px;\n  margin-top: -20px;\n  margin-bottom: 20px;\n`;\n\nexport const Actor = styled.li`\n  flex-basis: calc(100% / 2 - 20px);\n  margin-left: 20px;\n  margin-top: 20px;\n\n  @media (min-width: 768px) and (max-width: 1199px) {\n    flex-basis: calc(100% / 4 - 20px);\n  }\n\n  @media (min-width: 1200px) {\n    flex-basis: calc(100% / 6 - 20px);\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getCasts } from '../../services/API/moviesAPI';\nimport { Wrapper, Actor } from './cast.styled';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [actors, setActors] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    getCasts(Number(id))\n      .then(actors => {\n        setActors(actors);\n        setError(null);\n      })\n      .catch(error => {\n        setError(error);\n        setActors([]);\n      });\n  }, [id]);\n\n  return (\n    <>\n      {actors?.length > 0 && (\n        <Wrapper>\n          {actors.map(({ id, name, profile_path, character }) => (\n            <Actor key={id}>\n              <img\n                src={\n                  profile_path\n                    ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                    : `https://sdlatlas.com/public/img/thumbnail.jpg`\n                }\n                alt={name}\n                width={200}\n              />\n              <div>\n                <h3>{name}</h3>\n                <p>\n                  <b>Character:</b> {character}\n                </p>\n              </div>\n            </Actor>\n          ))}\n        </Wrapper>\n      )}\n      {actors.length === 0 && !error && (\n        <p>There is no information about actors for this movie</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY_API = '74c5e15336c71e6f10e46fc816460a0f';\n\nexport const getTrendingMovies = async () => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/trending/movie/day?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.log('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovies = async (searchQuery, currentPage) => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      query: searchQuery,\n      page: currentPage,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/search/movie?`, options);\n    const validData = data.results.map(\n      ({ id, title, poster_path, vote_average }) => ({\n        id,\n        poster_path: poster_path\n          ? `https://image.tmdb.org/t/p/w500${poster_path}`\n          : `https://sdlatlas.com/public/img/thumbnail.jpg`,\n        title: title ? title : 'name not found',\n        vote_average: vote_average.toFixed(1),\n      })\n    );\n    return validData;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n    },\n  };\n  try {\n    const { data } = await axios.get(`/movie/${id}?`, options);\n    return data;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getCasts = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/credits?`, options);\n\n    return data.cast;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n\nexport const getReviews = async id => {\n  const options = {\n    params: {\n      api_key: KEY_API,\n      language: 'en-US',\n      page: 1,\n    },\n  };\n\n  try {\n    const { data } = await axios.get(`/movie/${id}/reviews?`, options);\n\n    return data.results;\n  } catch (error) {\n    console.error('Something wrong with API', error.message);\n  }\n};\n"],"names":["Wrapper","styled","Actor","id","useParams","useState","actors","setActors","error","setError","useEffect","getCasts","Number","then","catch","length","map","name","profile_path","character","src","alt","width","axios","KEY_API","getTrendingMovies","options","params","api_key","data","validData","results","title","poster_path","vote_average","toFixed","console","log","message","getMovies","searchQuery","currentPage","query","page","getMovieById","language","cast","getReviews"],"sourceRoot":""}